Searching Algorithms:

----------------------------

Linear search:

In this algorithm, each element in the data structure is compared with the target element one by one, until a match is found or all elements have been checked.
Time complexity: O(n) - linear time
Example: Searching for a specific value in an unsorted array.

Linear search, also known as sequential search, is a simple searching algorithm that searches an array for a specific element by iterating through the array, one element at a time, until the target element is found or the end of the array is reached.

The linear search algorithm starts at the beginning of the array and compares each element in turn with the target element. If the target element is found, the search terminates and the index of the element is returned. If the end of the array is reached without finding the target element, the search is considered unsuccessful and the algorithm returns a special value (such as -1) to indicate that the element was not found.


Start at the first element of the array.
Compare the current element with the target element.
If the current element is equal to the target element, return its index and terminate the search.
If the end of the array is reached without finding the target element, return a special value (such as -1) to indicate that the element was not found.
If the target element is not found, move to the next element and repeat steps 2-4 until the end of the array is reached.

The time complexity of linear search is O(n), where n is the number of elements in the array. This means that the time taken to search for an element increases linearly with the size of the array. 
Linear search is a simple and easy-to-implement algorithm, but it may not be efficient for large arrays or when searching for an element near the end of the array.

For very large arrays, this can result in slow search times.

Linear search is best suited for small arrays or for situations where the data is not sorted and the search needs to be performed only once or a few times. It can also be used as a fallback algorithm when other search algorithms fail or when the data is not large enough to justify the use of more complex algorithms.

In summary, linear search is useful when searching small or unsorted arrays, but it may not be the best choice for large, sorted data sets.

function linear_search(arr, target)
    for i = 0 to length(arr)-1
        if arr[i] = target
            return i
    end for
    return -1
end function



Binary search:

This algorithm only works on sorted data structures (e.g. sorted arrays or binary search trees).
It starts by comparing the target element with the middle element of the data structure. If they are equal, the search is complete. If the target is less than the middle element, the search is continued in the lower half of the data structure. If the target is greater, the search is continued in the upper half.
This process is repeated until the target is found or there are no more elements to search.
Time complexity: O(log n) - logarithmic time
Example: Searching for a specific value in a sorted array.

function binarySearch(array, target):
    leftIndex = 0
    rightIndex = length(array) - 1
    
    while leftIndex <= rightIndex:
        midIndex = floor((leftIndex + rightIndex) / 2)
        
        if array[midIndex] == target:
            return midIndex
        
        if target < array[midIndex]:
            rightIndex = midIndex - 1
        else:
            leftIndex = midIndex + 1
            
    return -1

Binary search is a very efficient search algorithm that is used to search for an element in a sorted array. 
It is an ideal choice when we have a large sorted array and we need to search for a single element in it. 
Binary search is faster than linear search because it divides the search interval in half at each step, reducing the search space by a factor of two with each comparison.

Binary search is commonly used in applications where we need to search for an element in a large database or when we need to search for an item in a sorted list or array. 
For example, it can be used in web search engines to search for a keyword in a large database of web pages, or in a phone book to find a name quickly. Binary search can also be used in many other applications such as spell-checkers, spell-correction systems, and computer games.

12	22	33	43	44	55	66	76	77	88	99

search 22

mid = 2

while (0 <=2) {

	
	if(arr[1] == 22) {
		
		return mid
	
	}
	
	else if (22 < arr[2])
	
	right = mid - 1


}


Sorting Algorithm:
---------------------------------------

Bubble Sort: repeatedly compares adjacent elements and swaps them if they are in the wrong order, until the list is sorted.

procedure bubbleSort(A: list of sortable items)
    n := length(A)
    repeat
        swapped := false
        for i := 1 to n-1 do
            if A[i] > A[i+1] then
                swap(A[i], A[i+1])
                swapped := true
            end if
        end for
        n := n - 1
    until not swapped
end procedure

Start at the beginning of the list.

Compare the first two elements. If the first element is greater than the second element, swap them.

Move to the next pair of adjacent elements and repeat step 2.

Continue this process until you reach the end of the list.

If any swaps were made during the pass through the list, repeat the process from step 1.

If no swaps were made during the pass through the list, the list is now sorted and the algorithm can terminate.

The name "bubble sort" comes from the fact that smaller elements "bubble" to the top of the list, while larger elements sink to the bottom.

Bubble sort is not considered an efficient sorting algorithm for large lists, as its worst-case and average-case time complexity are both O(n^2), where n is the number of elements in the list.

Bubble sort for the given array [2,7,6,4,3,1,9]:

Pass 1:

(2, 7, 6, 4, 3, 1, 9) => (2, 6, 4, 3, 1, 7, 9)
(2, 6, 4, 3, 1, 7, 9) => (2, 4, 3, 1, 6, 7, 9)
(2, 4, 3, 1, 6, 7, 9) => (2, 3, 1, 4, 6, 7, 9)
(2, 3, 1, 4, 6, 7, 9) => (2, 1, 3, 4, 6, 7, 9)
(2, 1, 3, 4, 6, 7, 9) => (1, 2, 3, 4, 6, 7, 9)
Pass 2:

(1, 2, 3, 4, 6, 7, 9) => (1, 2, 3, 4, 6, 7, 9)
Since the array is already sorted, the algorithm stops.
Therefore, the sorted array is [1, 2, 3, 4, 6, 7, 9].


Simplicity: Bubble sort is very easy to understand and implement. It is a good starting point for those learning about sorting algorithms.
Space Efficiency: Bubble sort is an in-place sorting algorithm, meaning it requires very little extra memory to sort a list.
Performance on Small Lists: Bubble sort performs relatively well on small lists since it only requires a few iterations to sort them.

Performance: Bubble sort is generally considered to be one of the least efficient sorting algorithms, with a time complexity of O(n^2). This means that its performance degrades quickly as the list size increases.

-----------------------------------------------------------------------------

Selection Sort: repeatedly selects the smallest remaining element and places it in its proper position.

Steps for selection sort for the array [2,7,6,4,3,1,9]:

Starting from the first element (2), find the smallest element in the array and swap it with the first element. In this case, the smallest element is 1, so swap it with 2. The array becomes [1,7,6,4,3,2,9].
Move to the second element (7) and find the smallest element in the remaining array (starting from index 1). The smallest element is 2, so swap it with 7. The array becomes [1,2,6,4,3,7,9].
Move to the third element (6) and find the smallest element in the remaining array (starting from index 2). The smallest element is 3, so swap it with 6. The array becomes [1,2,3,4,6,7,9].
Repeat this process for the remaining elements until the entire array is sorted.
So, the sorted array is [1,2,3,4,6,7,9].

The time complexity of selection sort is O(n^2), where n is the number of elements in the array. The algorithm iterates through the array n times, and for each iteration, it performs n - i comparisons, where i is the index of the current iteration. Therefore, the total number of comparisons performed by selection sort is:

(n-1) + (n-2) + ... + 2 + 1 = n(n-1)/2

This is of the order of n^2, which makes the time complexity of selection sort quadratic.

function selectionSort(A: array of sortable items)
    n := length(A)
    for i from 0 to n-1 do
        // find the minimum element in the unsorted part of the array
        min_idx := i
        for j from i+1 to n-1 do
            if A[j] < A[min_idx] then
                min_idx := j
        
        // swap the minimum element with the first element of the unsorted part
        temp := A[i]
        A[i] := A[min_idx]
        A[min_idx] := temp
    end for
end function
